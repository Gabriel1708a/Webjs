const { DataManager, Utils, RentalSystem } = require('../index');
const { sincronizarGrupoComPainel } = require('../utils/SyncUtils');
const moment = require('moment-timezone');
const fs = require('fs');
const path = require('path');

class HorariosHandler {
    static activeIntervals = new Map(); // Para controlar intervalos ativos

    static async handle(client, message, command, args) {
        const groupId = message.from;

        // Verificar se grupo est√° ativo para hor√°rios pagantes
        const status = await RentalSystem.checkGroupStatus(groupId);
        if (!status.active) {
            await message.reply('‚ö†Ô∏è Hor√°rios pagantes dispon√≠veis apenas para grupos ativos');
            return;
        }

        if (!(await Utils.isAdmin(message)) && command !== 'horarios') {
            await message.reply('üö´ Apenas administradores podem gerenciar hor√°rios.');
            return;
        }

        switch (command) {
            case 'horarios':
                await this.sendHorario(client, message, groupId);
                break;

            case 'horapg':
                await this.toggleHorarios(client, message, groupId, args);
                break;

            case 'addhorapg':
                await this.scheduleNextHour(client, message, groupId, args);
                break;

            case 'imagem-horarios':
                await this.setImagemHorarios(client, message, groupId, args);
                break;
        }
    }

    static async sendHorario(client, message, groupId) {
        try {
            const now = moment.tz("America/Sao_Paulo");
            const currentHour = now.hours();

            const plataformas = [
                "üêØ FORTUNE TIGER", "üêâ DRAGON LUCK", "üê∞ FORTUNE RABBIT", "üê≠ FORTUNE MOUSE",
                "üêò GANESHA GOLD", "üëô BIKINI", "ü•ä MUAY THAI", "üé™ CIRCUS", "üêÇ FORTUNE OX",
                "üí∞ DOUBLE FORTUNE", "üêâüêÖ DRAGON TIGER LUCK", "üßû GENIE'S WISHES(GENIO)",
                "üå≥üå≤ JUNGLE DELIGHT", "üê∑ PIGGY GOLD", "üëë MIDAS FORTUNE", "üåûüåõ SUN & MOON",
                "ü¶π‚Äç‚ôÇÔ∏è WILD BANDITO", "üî•üïäÔ∏è PHOENIX RISES", "üõí SUPERMARKET SPREE",
                "üö¢üë®‚Äç‚úàÔ∏è CAPTAIN BOUNTY", "üéÉ MISTER HOLLOWEEN", "üçÄüí∞ LEPRECHAUN RICHES"
            ];

            function gerarHorarioAleatorio(horaBase, minIntervalo, maxIntervalo) {
                const minutoAleatorio = Math.floor(Math.random() * (maxIntervalo - minIntervalo + 1)) + minIntervalo;
                return `${horaBase.toString().padStart(2, '0')}:${minutoAleatorio.toString().padStart(2, '0')}`;
            }

            let horariosText = `üçÄ *SUGEST√ÉO DE HOR√ÅRIOS PAGANTES DAS ${currentHour.toString().padStart(2, '0')}h* üí∞\n\n`;
            let foundRelevantHorarios = false;

            plataformas.forEach(plataforma => {
                const horariosGerados = Array.from({ length: 7 }, () => {
                    const primeiroHorario = gerarHorarioAleatorio(currentHour, 0, 59);
                    const segundoHorario = gerarHorarioAleatorio(currentHour, 0, 59);
                    return `${primeiroHorario} - ${segundoHorario}`;
                });

                if (horariosGerados.length > 0) {
                    foundRelevantHorarios = true;
                    horariosText += `*${plataforma}*\n`;
                    horariosGerados.forEach(horario => {
                        horariosText += `  ‚îî ${horario}\n`;
                    });
                    horariosText += `\n`;
                }
            });

            if (!foundRelevantHorarios) {
                horariosText += "N√£o foi poss√≠vel gerar hor√°rios pagantes para a hora atual. Tente novamente mais tarde!\n\n";
            }

            const mensagemFinal = `Dica: alterne entre os giros entre normal e turbo, se vier um Grande Ganho, PARE e espere a pr√≥xima brecha!\nüîûN√ÉO INDICADO PARA MENORESüîû\nLembrando a todos!\nHor√°rios de probabilidades aumentam muito sua chance de lucrar, mas lembrando que n√£o anula a chance de perda, por mais que seja baixa jogue com responsabilidade...\n\nSistema By: Aurora\nCreat: Aurora Bot Oficial`;

            horariosText += mensagemFinal;

            // Verificar se h√° imagem configurada PARA ESTE GRUPO
            try {
                const savedImage = await DataManager.loadConfig(groupId, 'imagemHorarios');
                if (savedImage && savedImage.data) {
                    const { MessageMedia } = require('whatsapp-web.js');
                    const imagemGrupo = new MessageMedia(savedImage.mimetype, savedImage.data, savedImage.filename);
                    await client.sendMessage(groupId, imagemGrupo, { caption: horariosText });
                } else {
                    // Se n√£o h√° imagem para este grupo, envia s√≥ o texto
                    await message.reply(horariosText);
                }
            } catch (error) {
                // Se houver erro ao carregar imagem, envia s√≥ o texto
                await message.reply(horariosText);
            }

            // Salvar √∫ltimo envio
            await DataManager.saveConfig(groupId, 'ultimoHorario', moment().format());

        } catch (error) {
            console.error('Erro ao enviar hor√°rios:', error);
            await message.reply('‚ùå Erro ao enviar hor√°rios.');
        }
    }

    static async toggleHorarios(client, message, groupId, args) {
        const status = parseInt(args);
        
        if (status !== 0 && status !== 1) {
            await message.reply('‚ùå Use: !horapg 1 (ativar) ou !horapg 0 (desativar)');
            return;
        }

        try {
            await DataManager.saveConfig(groupId, 'horariosAtivos', status);
            
            // Sincronizar com o painel
            // [CORRE√á√ÉO] Passa o objeto DataManager para a fun√ß√£o de sincroniza√ß√£o
            await sincronizarGrupoComPainel(groupId, DataManager);
            
            if (status === 1) {
                await message.reply('‚úÖ *Hor√°rios pagantes ativados!*\n\nüé∞ Dicas autom√°ticas habilitadas\nüí° Use !addhorapg para agendar');
                
                // Iniciar envios autom√°ticos se configurado
                const config = await DataManager.loadConfig(groupId);
                if (config.intervaloHorarios) {
                    this.startAutoHours(client, groupId, config.intervaloHorarios);
                }
            } else {
                await message.reply('‚ùå *Hor√°rios pagantes desativados!*');
                
                // Parar envios autom√°ticos
                this.stopAutoHours(groupId);
            }

        } catch (error) {
            await message.reply('‚ùå Erro ao configurar hor√°rios.');
        }
    }

    static async scheduleNextHour(client, message, groupId, args) {
        const intervalo = this.parseInterval(args);
        
        if (!intervalo) {
            await message.reply('‚ùå *Intervalo inv√°lido!*\n\nüìù Use: !addhorapg 30m\nüî∏ Formatos: 30m, 1h, 2h');
            return;
        }

        try {
            await DataManager.saveConfig(groupId, 'intervaloHorarios', intervalo);
            
            // Verificar se hor√°rios est√£o ativos
            const config = await DataManager.loadConfig(groupId);
            if (config.horariosAtivos === 1) {
                this.startAutoHours(client, groupId, intervalo);
            }

            await message.reply(`‚è∞ *Pr√≥ximo hor√°rio agendado!*\n\nüé∞ Pr√≥xima dica em: ${args}\n‚úÖ Envios autom√°ticos configurados`);

        } catch (error) {
            await message.reply('‚ùå Erro ao agendar hor√°rio.');
        }
    }

    static async setImagemHorarios(client, message, groupId, args) {
        try {
            let imageMessage = null;

            // Verificar se h√° imagem na mensagem atual
            if (message.hasMedia) {
                imageMessage = message;
            } 
            // Verificar se √© resposta a uma mensagem com imagem
            else if (message.hasQuotedMsg) {
                const quotedMsg = await message.getQuotedMessage();
                if (quotedMsg.hasMedia) {
                    imageMessage = quotedMsg;
                }
            }

            if (!imageMessage) {
                await message.reply('‚ùå *Nenhuma imagem encontrada!*\n\nüìù *Como usar:*\n‚Ä¢ Envie uma imagem com !imagem-horarios na legenda\n‚Ä¢ Ou responda uma imagem com !imagem-horarios\n\nüí° Esta imagem ser√° usada nos hor√°rios autom√°ticos e manuais APENAS NESTE GRUPO');
                return;
            }

            // Baixar e salvar a imagem
            const media = await imageMessage.downloadMedia();

            // Salvar no sistema para persist√™ncia POR GRUPO
            await DataManager.saveConfig(groupId, 'imagemHorarios', {
                data: media.data,
                mimetype: media.mimetype,
                filename: media.filename || 'horarios.jpg',
                savedAt: moment().format()
            });

            await message.reply('‚úÖ *Imagem de hor√°rios definida para este grupo!*\n\nüñºÔ∏è Esta imagem ser√° usada em:\n‚Ä¢ Comando !horarios manual\n‚Ä¢ Hor√°rios autom√°ticos\n\nüìå *Importante:* A imagem √© espec√≠fica para este grupo');

        } catch (error) {
            console.error('Erro ao definir imagem:', error);
            await message.reply('‚ùå Erro ao processar imagem. Tente novamente.');
        }
    }

    static parseInterval(intervalStr) {
        if (!intervalStr) return null;
        
        const regex = /^(\d+)(m|h)$/i;
        const match = intervalStr.match(regex);
        
        if (!match) return null;
        
        const value = parseInt(match[1]);
        const unit = match[2].toLowerCase();
        
        switch (unit) {
            case 'm': return value; // minutos
            case 'h': return value * 60; // horas para minutos
            default: return null;
        }
    }

    static startAutoHours(client, groupId, intervalMinutes) {
        // Parar hor√°rio existente
        this.stopAutoHours(groupId);
        
        const intervalId = setInterval(async () => {
            try {
                const config = await DataManager.loadConfig(groupId);
                
                // Verificar se ainda est√° ativo
                if (config.horariosAtivos !== 1) {
                    this.stopAutoHours(groupId);
                    return;
                }

                // Verificar se grupo ainda est√° ativo
                const status = await RentalSystem.checkGroupStatus(groupId);
                if (!status.active) {
                    this.stopAutoHours(groupId);
                    return;
                }

                // Gerar hor√°rios automaticamente (mesmo sistema do manual)
                const now = moment.tz("America/Sao_Paulo");
                const currentHour = now.hours();

                const plataformas = [
                    "üêØ FORTUNE TIGER", "üêâ DRAGON LUCK", "üê∞ FORTUNE RABBIT", "üê≠ FORTUNE MOUSE",
                    "üêò GANESHA GOLD", "üëô BIKINI", "ü•ä MUAY THAI", "üé™ CIRCUS", "üêÇ FORTUNE OX",
                    "üí∞ DOUBLE FORTUNE", "üêâüêÖ DRAGON TIGER LUCK", "üßû GENIE'S WISHES(GENIO)",
                    "üå≥üå≤ JUNGLE DELIGHT", "üê∑ PIGGY GOLD", "üëë MIDAS FORTUNE", "üåûüåõ SUN & MOON",
                    "ü¶π‚Äç‚ôÇÔ∏è WILD BANDITO", "üî•üïäÔ∏è PHOENIX RISES", "üõí SUPERMARKET SPREE",
                    "üö¢üë®‚Äç‚úàÔ∏è CAPTAIN BOUNTY", "üéÉ MISTER HOLLOWEEN", "üçÄüí∞ LEPRECHAUN RICHES"
                ];

                function gerarHorarioAleatorio(horaBase, minIntervalo, maxIntervalo) {
                    const minutoAleatorio = Math.floor(Math.random() * (maxIntervalo - minIntervalo + 1)) + minIntervalo;
                    return `${horaBase.toString().padStart(2, '0')}:${minutoAleatorio.toString().padStart(2, '0')}`;
                }

                let horariosText = `üçÄ *SUGEST√ÉO DE HOR√ÅRIOS PAGANTES DAS ${currentHour.toString().padStart(2, '0')}h* üí∞\n\n`;

                plataformas.forEach(plataforma => {
                    const horariosGerados = Array.from({ length: 7 }, () => {
                        const primeiroHorario = gerarHorarioAleatorio(currentHour, 0, 59);
                        const segundoHorario = gerarHorarioAleatorio(currentHour, 0, 59);
                        return `${primeiroHorario} - ${segundoHorario}`;
                    });

                    horariosText += `*${plataforma}*\n`;
                    horariosGerados.forEach(horario => {
                        horariosText += `  ‚îî ${horario}\n`;
                    });
                    horariosText += `\n`;
                });

                const mensagemFinal = `Dica: alterne entre os giros entre normal e turbo, se vier um Grande Ganho, PARE e espere a pr√≥xima brecha!\nüîûN√ÉO INDICADO PARA MENORESüîû\nLembrando a todos!\nHor√°rios de probabilidades aumentam muito sua chance de lucrar, mas lembrando que n√£o anula a chance de perda, por mais que seja baixa jogue com responsabilidade...\n\nSistema By: Aurora\nCreat: Aurora Bot Oficial`;

                horariosText += mensagemFinal;

                // Enviar com imagem se configurada PARA ESTE GRUPO
                try {
                    const savedImage = await DataManager.loadConfig(groupId, 'imagemHorarios');
                    if (savedImage && savedImage.data) {
                        const { MessageMedia } = require('whatsapp-web.js');
                        const imagemGrupo = new MessageMedia(savedImage.mimetype, savedImage.data, savedImage.filename);
                        await client.sendMessage(groupId, imagemGrupo, { caption: horariosText });
                    } else {
                        // Se n√£o h√° imagem para este grupo, envia s√≥ o texto
                        await client.sendMessage(groupId, horariosText);
                    }
                } catch (error) {
                    // Se houver erro ao carregar imagem, envia s√≥ o texto
                    await client.sendMessage(groupId, horariosText);
                }

            } catch (error) {
                console.error('Erro no hor√°rio autom√°tico:', error);
            }
        }, intervalMinutes * 60 * 1000);

        this.activeIntervals.set(groupId, intervalId);
    }

    static stopAutoHours(groupId) {
        if (this.activeIntervals.has(groupId)) {
            clearInterval(this.activeIntervals.get(groupId));
            this.activeIntervals.delete(groupId);
        }
    }

    // Carregar hor√°rios autom√°ticos ao iniciar o bot
    static async loadAutoHours(client) {
        try {
            // N√£o precisamos mais carregar imagem global - cada grupo ter√° sua pr√≥pria imagem
            console.log('üé∞ Carregando hor√°rios autom√°ticos...');

            const configs = await DataManager.loadData('configs.json');
            
            if (configs && configs.grupos) {
                Object.keys(configs.grupos).forEach(groupId => {
                    const groupConfig = configs.grupos[groupId];
                    
                    if (groupConfig.horariosAtivos === 1 && groupConfig.intervaloHorarios) {
                        this.startAutoHours(client, groupId, groupConfig.intervaloHorarios);
                        console.log(`üé∞ Hor√°rios autom√°ticos ativados para grupo: ${groupId}`);
                    }
                });
            }

            console.log('‚úÖ Hor√°rios autom√°ticos carregados');
        } catch (error) {
            console.error('Erro ao carregar hor√°rios autom√°ticos:', error);
        }
    }
}

module.exports = HorariosHandler;