const { DataManager, Utils } = require('../index');
const axios = require('axios');

class SyncPanelHandler {
    static async handle(client, message, command, args) {
        if (!(await Utils.isAdmin(message)) && !Utils.isOwner(message)) {
            await message.reply('üö´ Apenas administradores podem sincronizar configura√ß√µes com o painel.');
            return;
        }

        const chat = await message.getChat();
        if (!chat.isGroup) {
            return message.reply('‚ùå Este comando s√≥ pode ser usado em grupos.');
        }

        try {
            // Mensagem de espera para o usu√°rio
            await message.reply('üîÑ Sincronizando configura√ß√µes com o painel... Por favor, aguarde.');

            const groupId = chat.id._serialized;
            const localConfig = await DataManager.loadConfig(groupId); // Pega as configs do configs.json

            // Verificar se h√° configura√ß√µes locais para sincronizar
            if (!localConfig || Object.keys(localConfig).length === 0) {
                await message.reply('‚ö†Ô∏è Nenhuma configura√ß√£o local encontrada para sincronizar.');
                return;
            }

            // URLs e token do painel
            const apiUrl = process.env.PANEL_API_URL || 'https://painel.botwpp.tech/api';
            const apiToken = process.env.PANEL_API_TOKEN || 'teste';

            // URL da nova rota no painel
            const syncUrl = `${apiUrl}/groups/${groupId}/force-sync`;

            // Obter o panel_user_id das configura√ß√µes locais
            const panelUserId = localConfig.panel_user_id;
            if (!panelUserId) {
                await message.reply('‚ö†Ô∏è *Erro:* ID do usu√°rio do painel n√£o encontrado.\n\nüí° *Dica:* Este grupo precisa ter sido adicionado atrav√©s do painel web primeiro.');
                return;
            }

            // Preparar dados para envio ao painel
            const syncData = {
                // ID do usu√°rio do painel (obrigat√≥rio)
                panel_user_id: panelUserId,
                
                // Configura√ß√µes de anti-link
                anti_link: localConfig.antiLink === 'antilink' ? 1 : 0,
                anti_link_gp: localConfig.antiLink === 'antilinkgp' ? 1 : 0,
                ban_link_gp: localConfig.antiLink === 'banlinkgp' ? 1 : 0,
                ban_extremo: localConfig.antiLink === 'banextremo' ? 1 : 0,
                
                // Outras configura√ß√µes
                ban_foto: localConfig.banFoto ? 1 : 0,
                ban_gringo: localConfig.banGringo ? 1 : 0,
                boas_vindas: localConfig.boasVindas ? 1 : 0,
                auto_resposta: localConfig.autoResposta ? 1 : 0,
                soadm: localConfig.soadm === '1' || localConfig.soadm === 1 ? 1 : 0,
                
                // Configura√ß√µes de hor√°rios
                horarios_ativos: localConfig.horariosAtivos ? 1 : 0,
                intervalo_horarios: localConfig.intervaloHorarios || 60,
                horario_abertura: localConfig.horarioAbertura || null,
                horario_fechamento: localConfig.horarioFechamento || null,
                
                // Dados adicionais que podem ser √∫teis
                ultima_sincronizacao: new Date().toISOString(),
                configuracoes_completas: localConfig
            };

            // Faz a requisi√ß√£o POST, enviando as configura√ß√µes locais no corpo
            const response = await axios.post(syncUrl, syncData, {
                headers: { 
                    'Authorization': `Bearer ${apiToken}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                timeout: 10000 // 10 segundos de timeout
            });

            if (response.status === 200 || response.status === 201) {
                let successMessage = '‚úÖ *Sucesso!* Suas configura√ß√µes atuais do bot foram enviadas e salvas no painel.\n\n';
                
                successMessage += `üë§ *Usu√°rio do painel:* ${panelUserId}\n\n`;
                
                // Mostrar resumo das configura√ß√µes sincronizadas
                successMessage += 'üìã *Configura√ß√µes sincronizadas:*\n';
                if (localConfig.antiLink) successMessage += `‚Ä¢ Anti-Link: ${localConfig.antiLink}\n`;
                if (localConfig.banFoto) successMessage += '‚Ä¢ Ban Foto: Ativado\n';
                if (localConfig.banGringo) successMessage += '‚Ä¢ Ban Gringo: Ativado\n';
                if (localConfig.boasVindas) successMessage += '‚Ä¢ Boas-vindas: Ativado\n';
                if (localConfig.autoResposta) successMessage += '‚Ä¢ Auto-resposta: Ativado\n';
                if (localConfig.soadm === '1') successMessage += '‚Ä¢ Modo SOADM: Ativado\n';
                if (localConfig.horariosAtivos) successMessage += '‚Ä¢ Hor√°rios: Ativado\n';
                
                successMessage += '\nüí° *Agora suas configura√ß√µes est√£o sincronizadas entre o bot e o painel web!*';
                
                await message.reply(successMessage);
            } else {
                throw new Error(`Resposta inesperada do servidor: ${response.status}`);
            }

        } catch (error) {
            console.error('‚ùå Erro ao executar !syncpanel:', error.message);
            
            let errorMessage = '‚ùå *Falha ao sincronizar.*\n\n';
            
            if (error.code === 'ECONNREFUSED') {
                errorMessage += 'üîå N√£o foi poss√≠vel conectar ao painel. Verifique se o servi√ßo est√° funcionando.';
            } else if (error.response?.status === 404) {
                errorMessage += 'üîç Grupo n√£o encontrado no painel. Verifique se o grupo est√° cadastrado.';
            } else if (error.response?.status === 401) {
                errorMessage += 'üîê Token de autentica√ß√£o inv√°lido. Verifique as credenciais do painel.';
            } else if (error.response?.status === 422) {
                errorMessage += 'üìù Dados inv√°lidos enviados. Verifique as configura√ß√µes locais.';
            } else {
                errorMessage += `‚ö†Ô∏è Erro: ${error.message}`;
            }
            
            errorMessage += '\n\nüí° *Dica:* Verifique se o grupo est√° cadastrado no painel e tente novamente.';
            
            await message.reply(errorMessage);
        }
    }
}

module.exports = SyncPanelHandler;
