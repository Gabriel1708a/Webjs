const { DataManager, Utils } = require('../index');

class DebugHandler {
    static async handle(client, message, command, args) {
        const groupId = message.from;

        // Verificar se √© admin
        if (!(await Utils.isAdmin(message)) && !Utils.isOwner(message)) {
            await message.reply('üö´ Apenas administradores podem usar comandos de debug.');
            return;
        }

        switch (command) {
            case 'checkpanel':
                await this.checkPanelConfig(message, groupId);
                break;
        }
    }

    static async checkPanelConfig(message, groupId) {
        try {
            const groupConfig = await DataManager.loadConfig(groupId);
            
            let response = `üîç **DEBUG - Configura√ß√£o do Painel**\n\n`;
            response += `üì± **Grupo ID:** ${groupId}\n\n`;
            
            if (!groupConfig || Object.keys(groupConfig).length === 0) {
                response += `‚ùå **Status:** Nenhuma configura√ß√£o encontrada\n`;
                response += `üí° **A√ß√£o:** Execute !syncpanel para sincronizar com o painel`;
            } else {
                response += `‚úÖ **Status:** Configura√ß√£o encontrada\n\n`;
                response += `üîß **Configura√ß√µes:**\n`;
                
                if (groupConfig.panel_user_id) {
                    response += `‚úÖ **panel_user_id:** ${groupConfig.panel_user_id}\n`;
                } else {
                    response += `‚ùå **panel_user_id:** N√£o encontrado\n`;
                }
                
                // Mostrar outras configura√ß√µes importantes
                const importantKeys = ['soadm', 'boasVindas', 'autoResposta', 'antiLink'];
                importantKeys.forEach(key => {
                    if (groupConfig[key] !== undefined) {
                        response += `üìã **${key}:** ${JSON.stringify(groupConfig[key])}\n`;
                    }
                });
                
                // Mostrar total de configura√ß√µes
                response += `\nüìä **Total de configura√ß√µes:** ${Object.keys(groupConfig).length}`;
            }
            
            await message.reply(response);
            
        } catch (error) {
            console.error('[DEBUG] Erro ao verificar configura√ß√£o do painel:', error);
            await message.reply('‚ùå Erro ao verificar configura√ß√£o do painel.');
        }
    }
}

module.exports = DebugHandler;