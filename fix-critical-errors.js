#!/usr/bin/env node
// fix-critical-errors.js - Script para corrigir erros cr√≠ticos do bot
// Vers√£o: 1.0 - Corre√ß√£o de validateAndGetParts e limpeza de dados

const fs = require('fs');
const path = require('path');

console.log('üîß INICIANDO CORRE√á√ÉO DE ERROS CR√çTICOS...\n');

// 1. Verificar e corrigir arquivos de dados corrompidos
function fixDataFiles() {
    console.log('üìÅ Verificando arquivos de dados...');
    
    const dataDir = './data';
    if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir);
        console.log('‚úÖ Pasta data criada');
    }
    
    const requiredFiles = [
        { file: 'ads.json', content: { "anuncios": {} } },
        { file: 'configs.json', content: {} },
        { file: 'grupoAluguel.json', content: { "grupos": {} } },
        { file: 'notifiedUsers.json', content: {} }
    ];
    
    for (const { file, content } of requiredFiles) {
        const filePath = path.join(dataDir, file);
        
        try {
            if (fs.existsSync(filePath)) {
                // Verificar se o arquivo √© v√°lido JSON
                const data = fs.readFileSync(filePath, 'utf8');
                JSON.parse(data);
                console.log(`‚úÖ ${file} - OK`);
            } else {
                // Criar arquivo se n√£o existir
                fs.writeFileSync(filePath, JSON.stringify(content, null, 2));
                console.log(`üÜï ${file} - Criado`);
            }
        } catch (error) {
            // Arquivo corrompido - recriar
            fs.writeFileSync(filePath, JSON.stringify(content, null, 2));
            console.log(`üîß ${file} - Corrigido (estava corrompido)`);
        }
    }
}

// 2. Limpar cache de sess√£o do WhatsApp
function cleanWhatsAppSession() {
    console.log('\nüßπ Limpando cache de sess√£o...');
    
    const sessionDirs = ['.wwebjs_auth', '.wwebjs_cache', 'session'];
    
    for (const dir of sessionDirs) {
        if (fs.existsSync(dir)) {
            try {
                fs.rmSync(dir, { recursive: true, force: true });
                console.log(`üóëÔ∏è Removido: ${dir}`);
            } catch (error) {
                console.log(`‚ö†Ô∏è N√£o foi poss√≠vel remover ${dir}: ${error.message}`);
            }
        }
    }
}

// 3. Verificar e corrigir configura√ß√µes
function fixConfigurations() {
    console.log('\n‚öôÔ∏è Verificando configura√ß√µes...');
    
    try {
        const configPath = './config.json';
        if (fs.existsSync(configPath)) {
            const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            
            // Verificar configura√ß√µes cr√≠ticas
            let modified = false;
            
            if (!config.laravelApi) {
                config.laravelApi = {};
                modified = true;
            }
            
            if (!config.laravelApi.timeout || config.laravelApi.timeout < 15000) {
                config.laravelApi.timeout = 15000;
                modified = true;
            }
            
            if (!config.laravelApi.maxRetries) {
                config.laravelApi.maxRetries = 3;
                modified = true;
            }
            
            if (modified) {
                fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
                console.log('‚úÖ Configura√ß√µes atualizadas');
            } else {
                console.log('‚úÖ Configura√ß√µes OK');
            }
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao verificar configura√ß√µes: ${error.message}`);
    }
}

// 4. Verificar depend√™ncias
function checkDependencies() {
    console.log('\nüì¶ Verificando depend√™ncias...');
    
    try {
        const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        const nodeModules = fs.existsSync('./node_modules');
        
        if (!nodeModules) {
            console.log('‚ùå node_modules n√£o encontrado - execute: npm install');
        } else {
            console.log('‚úÖ node_modules encontrado');
        }
        
        // Verificar whatsapp-web.js
        const wwjsVersion = packageJson.dependencies['whatsapp-web.js'];
        console.log(`üì± whatsapp-web.js: ${wwjsVersion}`);
        
        if (wwjsVersion.includes('1.23.0') || wwjsVersion.includes('^1.23')) {
            console.log('‚úÖ Vers√£o do whatsapp-web.js atualizada');
        } else {
            console.log('‚ö†Ô∏è Considere atualizar whatsapp-web.js para v1.23.0+');
        }
        
    } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao verificar depend√™ncias: ${error.message}`);
    }
}

// 5. Criar script de teste
function createTestScript() {
    console.log('\nüß™ Criando script de teste...');
    
    const testScript = `#!/usr/bin/env node
// test-bot-quick.js - Teste r√°pido do bot
const { Client, LocalAuth } = require('whatsapp-web.js');

console.log('üöÄ Iniciando teste r√°pido do bot...');

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu'
        ]
    }
});

client.on('qr', (qr) => {
    console.log('üì± QR Code gerado - escaneie com seu WhatsApp');
});

client.on('ready', () => {
    console.log('‚úÖ Bot conectado com sucesso!');
    console.log('üîß Teste conclu√≠do - bot est√° funcionando');
    process.exit(0);
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
    process.exit(1);
});

client.on('disconnected', (reason) => {
    console.log('üì¥ Bot desconectado:', reason);
    process.exit(1);
});

// Timeout de seguran√ßa
setTimeout(() => {
    console.log('‚è∞ Timeout do teste - encerrando');
    process.exit(1);
}, 60000);

client.initialize();
`;

    fs.writeFileSync('./test-bot-quick.js', testScript);
    console.log('‚úÖ Script de teste criado: test-bot-quick.js');
}

// Executar todas as corre√ß√µes
function main() {
    try {
        fixDataFiles();
        fixConfigurations();
        checkDependencies();
        createTestScript();
        
        console.log('\nüéâ CORRE√á√ïES CONCLU√çDAS!');
        console.log('\nüìã PR√ìXIMOS PASSOS:');
        console.log('1. Execute: npm install (se necess√°rio)');
        console.log('2. Execute: node test-bot-quick.js (para testar)');
        console.log('3. Execute: node index.js (para iniciar o bot)');
        console.log('\nüí° DICAS:');
        console.log('- Se o erro validateAndGetParts persistir, √© um problema interno do WhatsApp Web');
        console.log('- Tente usar uma conta diferente ou aguardar algumas horas');
        console.log('- Verifique se sua conex√£o com a internet est√° est√°vel');
        
    } catch (error) {
        console.error('üí• Erro durante a corre√ß√£o:', error.message);
        process.exit(1);
    }
}

main();